import React, { useState } from 'react';
import './DelayPredictionModal.css';

const DelayPredictionModal = ({ isOpen, onClose, waypoints, routeInfo }) => {
  const [loading, setLoading] = useState(false);
  const [weatherData, setWeatherData] = useState('');
  const [newsData, setNewsData] = useState('');
  const [error, setError] = useState('');

  const handlePredictDelay = async () => {
    setLoading(true);
    setError('');
    setWeatherData('');
    setNewsData('');

    try {
      // Call weather API first
      console.log('Calling weather API...');
      const weatherResponse = await callWeatherAPI(waypoints, routeInfo);
      setWeatherData(weatherResponse);
      console.log('Weather API response received, calling news API...');
      
      // Only call news API after weather API completes
      const newsResponse = await callNewsAPI(waypoints);
      setNewsData(newsResponse);
      console.log('News API response received');
      
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      console.error('Delay prediction error:', err);
    } finally {
      setLoading(false);
    }
  };

  // Format waypoints for weather API (route format)
  const formatRouteForWeatherAPI = (waypoints) => {
    if (!waypoints || waypoints.length === 0) return '';
    return waypoints
      .filter(wp => wp.lat && wp.lng)
      .map(wp => `${wp.lat},${wp.lng}`)
      .join(';');
  };

  // Format waypoints for news API (coords array)
  const formatCoordsForNewsAPI = (waypoints) => {
    if (!waypoints || waypoints.length === 0) return [];
    return waypoints
      .filter(wp => wp.lat && wp.lng)
      .map(wp => ({ lat: wp.lat, lon: wp.lng }));
  };

  // Call Weather and Other Conditions API
  const callWeatherAPI = async (waypoints, routeInfo) => {
    const route = formatRouteForWeatherAPI(waypoints);
    if (!route) throw new Error('No valid waypoints for weather API');

    const response = await fetch('http://194.31.159.170:9000/api/plugins/v1/8bcd54b558aab7237b63df2ea650c125', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: ${routeInfo?.totalDistanceText || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${routeInfo?.totalDurationText || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
        language: 'russian',
        data: {
          route: route,
          product: 'logistics transportation'
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Weather API error: ${response.status}`);
    }

    const jsonResponse = await response.json();
    return jsonResponse.text || jsonResponse;
  };

  // Call News Summarization API
  const callNewsAPI = async (waypoints) => {
    const coords = formatCoordsForNewsAPI(waypoints);
    if (coords.length === 0) throw new Error('No valid coordinates for news API');

    const response = await fetch('http://194.31.159.170:9000/api/plugins/v1/148d7eba8f02a98eed0003a6f797a735', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text: '–û–±–æ–±—â–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏—Å—Ç–∏–∫—É –≤ —ç—Ç–∏—Ö –º–µ—Å—Ç–∞—Ö',
        language: 'russian',
        data: {
          coords: coords
        }
      })
    });

    if (!response.ok) {
      throw new Error(`News API error: ${response.status}`);
    }

    const jsonResponse = await response.json();
    return jsonResponse.text || jsonResponse;
  };

  // Format text with proper line breaks and basic markdown
  const formatResponseText = (text) => {
    if (!text) return '';
    
    // Convert \n to actual line breaks and apply basic markdown formatting
    return text
      .split('\\n')
      .map(line => line.trim())
      .filter(line => line.length > 0)
      .map(line => {
        // Handle markdown formatting
        line = line.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); // Bold
        line = line.replace(/\*(.*?)\*/g, '<em>$1</em>'); // Italic
        line = line.replace(/^### (.*)/g, '<h3>$1</h3>'); // H3
        line = line.replace(/^## (.*)/g, '<h2>$1</h2>'); // H2
        line = line.replace(/^# (.*)/g, '<h1>$1</h1>'); // H1
        line = line.replace(/^- (.*)/g, '‚Ä¢ $1'); // Bullet points
        return line;
      })
      .join('\n');
  };

  if (!isOpen) return null;

  return (
    <div className="delay-modal-overlay" onClick={onClose}>
      <div className="delay-modal-content" onClick={e => e.stopPropagation()}>
        <div className="delay-modal-header">
          <h3>üöõ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫</h3>
          <button 
            className="delay-modal-close" 
            onClick={onClose}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
          >
            √ó
          </button>
        </div>

        <div className="delay-modal-body">
          {!weatherData && !newsData && !loading && !error && (
            <div className="delay-initial-state">
              <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.</p>
              <div className="route-summary">
                <strong>–°–≤–æ–¥–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:</strong>
                <ul>
                  <li>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {routeInfo?.totalDistanceText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li>
                  <li>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {routeInfo?.totalDurationText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</li>
                  <li>–ü—É—Ç–µ–≤—ã–µ —Ç–æ—á–∫–∏: {waypoints?.length || 0}</li>
                </ul>
              </div>
            </div>
          )}

          {loading && (
            <div className="delay-loading">
              <div className="delay-spinner"></div>
              <p>–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç–∞...</p>
              <small>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞</small>
            </div>
          )}

          {error && (
            <div className="delay-error">
              <div className="error-icon">‚ö†Ô∏è</div>
              <p>{error}</p>
            </div>
          )}

          {(weatherData || newsData) && (
            <div className="delay-results">
              {weatherData && (
                <div className="analysis-section">
                  <h4>üå§Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –∏ —É—Å–ª–æ–≤–∏–π</h4>
                  <div className="delay-response weather-response">
                    <div 
                      className="formatted-text"
                      dangerouslySetInnerHTML={{ __html: formatResponseText(weatherData) }}
                    />
                  </div>
                </div>
              )}

              {newsData && (
                <div className="analysis-section">
                  <h4>üì∞ –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π</h4>
                  <div className="delay-response news-response">
                    <div 
                      className="formatted-text"
                      dangerouslySetInnerHTML={{ __html: formatResponseText(newsData) }}
                    />
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        <div className="delay-modal-footer">
          {!weatherData && !newsData && !loading && (
            <button 
              className="delay-predict-button"
              onClick={handlePredictDelay}
              disabled={loading}
            >
              {loading ? '–ê–Ω–∞–ª–∏–∑...' : 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫'}
            </button>
          )}
          
          {(weatherData || newsData) && (
            <button 
              className="delay-predict-button secondary"
              onClick={handlePredictDelay}
              disabled={loading}
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
            </button>
          )}
          
          <button 
            className="delay-close-button"
            onClick={onClose}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default DelayPredictionModal;
